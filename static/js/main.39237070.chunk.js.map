{"version":3,"sources":["config/app.config.js","common/choice.component.js","common/question.component.js","common/loading.component.js","answer_sheet/answer_sheet.component.js","quiz/quiz.component.js","common/notfound.component.js","quiz/result.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUrl","axiosTimeOut","Choice","props","Fragment","className","onClick","e","question","target","attributes","getNamedItem","value","choice","ans","onChoiceChange","type","name","option","Question","map","optn","index","key","LoadingComponent","class","Spinner","animation","variant","axiosInstance","axios","create","baseURL","config","timeout","AnswerSheetComponent","params","match","state","quizCode","code","quiz","questions","numberOfQuestions","isLastIndex","progress","answers","currentQuestion","redirect","user","isLoading","handleNextClick","bind","handleFinishClick","addAnswers","answer","answs","this","indexOf","splice","setState","get","then","response","status","data","length","alert","message","catch","error","window","onbeforeunload","post","button","label","to","pathname","Button","icon","faCheckCircle","faArrowRight","ProgressBar","striped","animated","now","Card","Header","Body","Carousel","controls","touch","interval","indicators","activeIndex","qstn","Item","Footer","React","Component","QuizComponent","quizzes","console","log","NotFound","redirectToHome","faHome","headers","ResultComponent","location","results","percentage","tdClassName","grade","Table","bordered","responsive","App","exact","path","component","Notfound","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39237070.chunk.js","sourcesContent":["module.exports ={\n    baseUrl : 'https://udemy-coding-challenge-api.herokuapp.com/',\n    axiosTimeOut: 20000\n}","import React, { useState, useEffect, useRef } from 'react';\n\nfunction Choice(props) {\n    return (\n\n        <React.Fragment>\n            <div className=\"form-check\">\n                <input onClick={onClick} className=\"form-check-input\" type=\"radio\" name={props.name} value={props.option[\"choice\"]} />\n                <label className=\"form-check-label\">{props.option[\"narrative\"]}</label>\n            </div>\n        </React.Fragment>\n    )\n\n    function onClick(e) {\n        let question = e.target.attributes.getNamedItem('name').value\n        let choice = e.target.attributes.getNamedItem('value').value\n        let ans = {\n            question: question,\n            choice: choice\n        }\n\n        props.onChoiceChange(ans)\n\n\n    }\n\n\n}\n\nexport default Choice;","import React from 'react'\nimport Choice from './choice.component'\n\nfunction Question(props) {\n    return (\n\n        <React.Fragment>\n               <h5 className=\"card-title\">{props.question[\"narrative\"]}</h5>\n            {                \n                props.question[\"options\"].map((optn, index)=>{\n                    return(\n                        <Choice key={index} onChoiceChange={props.onChoiceChange} name={props.question[\"code\"]} option={optn}/>\n                    )\n                })\n            }\n        </React.Fragment>\n    )\n}\n\nexport default Question;\n","import React from 'react';\nimport { Spinner } from 'react-bootstrap'\n\nfunction LoadingComponent(props) {\n    return (\n        <React.Fragment>\n            <div class=\"col col-md-12 d-flex justify-content-center \">\n                <Spinner animation=\"grow\" variant=\"primary\" />\n                <Spinner animation=\"grow\" variant=\"secondary\" />\n                <Spinner animation=\"grow\" variant=\"success\" />\n                <Spinner animation=\"grow\" variant=\"danger\" />\n                <Spinner animation=\"grow\" variant=\"warning\" />\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default LoadingComponent;","import React from 'react'\nimport axios from 'axios'\nimport Question from '../common/question.component'\nimport { Card, Carousel, Button, ProgressBar } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowRight, faCheckCircle } from '@fortawesome/free-solid-svg-icons'\nimport { Redirect } from \"react-router-dom\";\nimport LoadingComponent from '../common/loading.component'\nimport config from '../config/app.config'\n\nconst axiosInstance = axios.create({\n    baseURL: config.baseUrl,\n    timeout: config.axiosTimeOut\n});\n\nexport default class AnswerSheetComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        const { params } = this.props.match\n        this.state = {\n            quizCode: params.code,\n            quiz: {},\n            questions: [],\n            numberOfQuestions: 0,\n            index: 0,\n            isLastIndex: false,\n            progress: 0,\n            answers: [],\n            currentQuestion: \"\",\n            redirect: null,\n            user: \"\",\n            isLoading: true\n        }\n\n        this.handleNextClick = this.handleNextClick.bind(this);\n        this.handleFinishClick = this.handleFinishClick.bind(this);\n        this.addAnswers = this.addAnswers.bind(this);\n    }\n    addAnswers(answer) {\n        let answs = this.state.answers\n\n        var index = answs.map(function (answer) {\n            return answer.question\n        }).indexOf(answer.question);\n\n        if (index != -1) {\n            answs.splice(index, 1)\n        }\n\n        answs = [...answs, answer]\n        this.setState({ answers: answs })\n    }\n    componentDidMount() {\n        const { params } = this.props.match\n        axiosInstance.get('/quizzes/code/' + params.code)\n            .then(response => {\n                if (response.status == 200) {\n                    this.setState({\n                        quiz: response.data,\n                        questions: response.data.questions,\n                        numberOfQuestions: response.data.questions.length,\n                        progress: response.data.questions.length == 0 ? 0 : 100 * (1 / response.data.questions.length),\n                        currentQuestion: response.data.questions[0][\"code\"],\n                        isLoading: false\n                    });\n                } else {\n                    this.setState({ isLoading: false })\n                    alert(response.data.message)\n                }\n            })\n            .catch(error => {\n                this.setState({ isLoading: false })\n                alert(\"Unexpected error occured.\")\n            })\n\n        window.onbeforeunload = function () {\n            alert();\n            return \"\";\n        }.bind(this);\n    }\n\n    handleFinishClick(e) {\n\n        var position = this.state.answers.map(function (answer) {\n            return answer.question\n        }).indexOf(this.state.currentQuestion);\n\n        if (position == -1) {\n            alert(\"Choose answer before proceeding\")\n            return\n        }\n\n        let data = {\n            quiz: this.state.quizCode,\n            answers: this.state.answers\n        }\n        this.setState({\n            isLoading: true\n        })\n        axiosInstance.post('/answer_sheets/', data)\n            .then(response => {\n                if (response.status == 200) {\n                    this.setState({\n                        user: response.data,\n                        redirect: true,\n                    });\n                } else {\n                    alert(response.data.message + \". Kindly retry again.\")\n                    this.setState({\n                        isLoading: false\n                    })\n                }\n\n            })\n            .catch(error => {\n                alert(\"Unexpected error occured.Kindly retry again.\")\n                this.setState({\n                    isLoading: false\n                })\n            })\n    }\n\n    handleNextClick(e) {\n        var position = this.state.answers.map(function (answer) {\n            return answer.question\n        }).indexOf(this.state.currentQuestion);\n\n        if (position == -1) {\n            alert(\"Choose answer before proceeding\")\n            return\n        }\n\n        this.setState({\n            index: this.state.index + 1,\n            progress: 100 * ((this.state.index + 2) / this.state.numberOfQuestions),\n            currentQuestion: this.state.questions[this.state.index + 1][\"code\"]\n        })\n        if ((this.state.index + 1) == (this.state.numberOfQuestions - 1)) {\n            this.setState({ isLastIndex: true })\n        }\n    }\n\n    render() {\n        if (this.state.redirect) {\n\n            return <Redirect to={\n                {\n                    pathname: '/results',\n                    state: {\n                        user: this.state.user\n                    }\n\n                }\n            }\n            />\n        }\n        let button;\n        let label;\n\n        if (this.state.isLastIndex) {\n            button = <Button onClick={this.handleFinishClick} variant=\"success\" className=\"float-right float-sm-right\">\n                <span> Finish </span> <FontAwesomeIcon icon={faCheckCircle} />\n            </Button>\n        } else {\n            button = <Button onClick={this.handleNextClick}\n                variant=\"success\"\n                className=\"float-right float-sm-right\">\n                <span> Next </span> <FontAwesomeIcon icon={faArrowRight} />\n            </Button>\n        }\n        if (this.state.numberOfQuestions != 0) {\n            label = <label> {`${this.state.index + 1} / ${this.state.numberOfQuestions} Questions.`} </label>\n\n        } else {\n            button = null;\n        }\n        return (\n\n            <div className=\"row justify-content-md-center\">\n                <div className=\"col col-lg-6\"> {\n                    this.state.isLoading ? <div className=\"row justify-content-md-center\"> <LoadingComponent /> </div> :\n                        <div> <ProgressBar striped animated variant=\"success\" now={this.state.progress} />\n\n                            <Card>\n                                <Card.Header> {this.state.quiz[\"name\"]} </Card.Header>\n                                <Card.Body>\n                                    <Carousel controls={false}\n                                        touch={false}\n                                        interval={null}\n                                        indicators={false}\n                                        activeIndex={this.state.index}>\n\n                                        {\n                                            this.state.questions.map((qstn, index) => {\n\n                                                return (\n                                                    <Carousel.Item key={index}>\n                                                        <Question question={qstn} onChoiceChange={this.addAnswers} />\n\n                                                    </ Carousel.Item>\n                                                )\n\n                                            })\n                                        }\n\n                                    </Carousel>\n                                </Card.Body>\n                                <Card.Footer className=\"text-muted\"> {label}\n\n                                    {button}\n\n                                </Card.Footer>\n\n                            </Card>\n                        </div>\n                } </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom';\nimport { Card } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons'\nimport LoadingComponent from '../common/loading.component'\nimport config from '../config/app.config'\n\nconst axiosInstance = axios.create({\n    baseURL: config.baseUrl,\n    timeout: config.axiosTimeOut\n});\n\n\nexport default class QuizComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            quizzes: [],\n            isLoading: true\n        }\n    }\n\n    componentDidMount() {\n        axiosInstance.get('/quizzes/list')\n            .then(response => {\n                if (response.status == 200) {\n                    this.setState({ quizzes: response.data.quizzes, isLoading: false });\n                } else {\n                    this.setState({ isLoading: false })\n                    alert(response.data.message + \". Kindly retry.\")\n                }\n            })\n            .catch(error => {\n                console.log(error)\n                this.setState({ isLoading: false })\n                alert(\"An unexpected error occured. Kindly retry.\")\n            })\n    }\n    render() {\n        return (\n            <div className=\"row justify-content-md-center\">\n                <div className=\"col col-lg-6\">\n                    <Card>\n                        <Card.Header className=\"purple-card-header\"> < b> Available Quiz </b></Card.Header> {\n                            this.state.isLoading ? < div className=\"row justify-content-md-center\">\n                                <LoadingComponent />\n                            </div>\n                                :\n                                <ul className=\"list-group\"> {\n                                    this.state.quizzes.map((quiz, index) => {\n                                        return (\n                                            <li key={index} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                                                {quiz[\"name\"]}\n                                                <span className=\"badge badge-primary badge-pill\">\n                                                    <Link className=\"white-link\" to={`/quiz/${quiz[\"code\"]}`}>\n                                                        <FontAwesomeIcon icon={faArrowRight} />\n                                                    </Link>\n                                                </span>\n                                            </li>\n                                        )\n                                    })\n                                }\n                                </ul>\n                        }\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport { Button } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\nimport { Redirect } from \"react-router-dom\";\n\nexport default class NotFound extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            redirect: false\n        }\n\n        this.redirectToHome = this.redirectToHome.bind(this)\n\n    }\n\n    redirectToHome(e) {\n        this.setState({\n            redirect: true\n        })\n\n    }\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to={\n                { pathname: '/quizapp/' }\n            }\n            />\n        }\n        return (\n            <div className=\"page-wrap d-flex flex-row align-items-center\">\n                <div className=\"container\">\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-md-12 text-center\">\n                            <span className=\"display-1 d-block\">404</span>\n                            <div className=\"mb-4 lead\">The page you are looking for was not found.</div>\n                            <Button onClick={this.redirectToHome} variant=\"primary\" className=\"\">\n                                    <span>Back To Home</span>\n                                    <FontAwesomeIcon icon={faHome} />\n                                </Button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}","import React, { Component } from 'react';\nimport axios from 'axios'\nimport { Card, Table, Button } from 'react-bootstrap'\nimport { Redirect } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\nimport LoadingComponent from '../common/loading.component'\n\nimport config from '../config/app.config'\n\nconst axiosInstance = axios.create({\n    baseURL: config.baseUrl,\n    timeout: config.axiosTimeOut,\n    headers: { 'Content-Type': 'application/json' }\n});\n\nclass ResultComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            user: this.props.location.state.user,\n            results: {},\n            percentage: 0,\n            redirect: false,\n            isLoading: true,\n            tdClassName: \"\"\n\n        }\n        this.redirectToHome = this.redirectToHome.bind(this)\n    }\n    componentDidMount() {\n        axiosInstance.get('/answer_sheets/user/' + this.state.user)\n            .then(response => {\n                if (response.status == 200) {\n                    this.setState({\n                        results: response.data,\n                        percentage: response.data.percentage[\"$numberDecimal\"],\n                        isLoading: false,\n                        tdClassName: response.data.grade == \"Fail\" ? \"td-danger\" : \"td-success\"\n                    });\n                } else {\n                    alert(response.data.message + \". Kindly retry again.\")\n                    this.setState({\n                        isLoading: false\n                    })\n                }\n            })\n            .catch(error => {\n                this.setState({ isLoading: false })\n                alert(\"Unexpected error occured.Kindly retry again.\")\n\n            })\n    }\n\n    redirectToHome(e) {\n        this.setState({\n            redirect: true\n        })\n\n    }\n\n    render() {\n        if (this.state.redirect) {\n            return <Redirect to={\n                { pathname: '/quizapp/' }\n            }\n            />\n        }\n        return (\n            <div className=\"row justify-content-md-center\">\n                <div className=\"col col-lg-6\">\n                    {this.state.isLoading ? <div className=\"row justify-content-md-center\"> <LoadingComponent /> </div> :\n                        <Card>\n                            <Card.Header className=\"purple-card-header\"><b> Quiz Results</b></Card.Header>\n                            <Card.Body>\n                                <Table striped bordered responsive>\n                                    <tbody>\n                                        <tr>\n                                            <td> Overal Score</td>\n                                            <td> {this.state.results[\"finalScore\"]}</td>\n                                        </tr>\n                                        <tr>\n                                            <td> Total Marks</td>\n                                            <td> {this.state.results[\"quizTotal\"]}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>Percentage</td>\n                                            <td>{`${this.state.percentage} %`}</td>\n                                        </tr>\n                                        <tr>\n                                            <td> Remark</td>\n                                            <td className={this.state.tdClassName}>{this.state.results[\"grade\"]}</td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                            </Card.Body>\n                            <Card.Footer>\n                                <Button onClick={this.redirectToHome} variant=\"success\" className=\"float-right float-sm-right\">\n                                    <span> Take Another Quiz</span>\n                                    <FontAwesomeIcon icon={faHome} />\n                                </Button>\n                            </Card.Footer>\n                        </Card>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ResultComponent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\nimport './app.css';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport AnswerSheetComponent from './answer_sheet/answer_sheet.component'\nimport QuizComponent from './quiz/quiz.component'\nimport Notfound from './common/notfound.component'\nimport ResultComponent from './quiz/result.component'\n\nclass App extends React.Component {\n\n  render() {\n      return (\n          <Router>\n              <div>\n                \n                  <Switch>\n                      <Route exact path=\"/quizapp/\" component={QuizComponent} />\n                      <Route exact path=\"/\" component={QuizComponent} />\n                      <Route exact path=\"/results\" component={ResultComponent} />\n                      <Route path=\"/quiz/:code\" component={AnswerSheetComponent} />\n                      <Route component={Notfound} />\n                  </Switch>\n              </div>\n          </Router>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}